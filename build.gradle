group 'org.openflexo.demo'
version '1.0-SNAPSHOT'


buildscript {
    ext.openflexo_version = '2.0.1-SNAPSHOT'
    ext.destination = System.getProperty("DEST") != null ? System.getProperty("DEST") : "/home/openflexoserver"
}

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    maven { url "https://maven.openflexo.org/artifactory/openflexo-deps/" }
}

dependencies {
    // dependency to the server
   compile "org.openflexo:http-server:${openflexo_version}"

    // set of connectors
    compile "org.openflexo:docxconnector:${openflexo_version}"
    compile "org.openflexo:excelconnector:${openflexo_version}"
    //compile "org.openflexo:pdfconnector:${openflexo_version}"

    compile "org.openflexo:gina-http:${openflexo_version}"

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

def appDir = file(buildDir.canonicalPath + "/app");

task stopApp(group: "deployement") {
    doLast {
        if (file(destination + "/stop.sh").exists()) {
            exec {
                workingDir destination
                commandLine "./stop.sh"
            }
        }
    }
}

task cleanApp(dependsOn: ["stopApp", "assemble"], group: "deployement") {
    doLast {
        if (appDir.exists()) {
            appDir.deleteDir();
        }
    }
}

task copyFiles(dependsOn: "cleanApp", group: "deployement") {
    doLast {
        // copy jars into libs
        copy {
            from configurations.runtime.resolve()
            into appDir.canonicalPath + "/libs"
        }
        // copy all web resources into webroot
        copy {
            from "webroot"
            into appDir.canonicalPath + "/webroot"
        }
        // copy start scripts
        copy {
            from "deploy"
            into appDir.canonicalPath
        }
        // copy project
        copy {
            from "demo.prj"
            into appDir.canonicalPath + "/demo.prj"
        }
        file(appDir.canonicalPath + "/logs").mkdir()
    }
}

task sync(type: Sync, dependsOn: "copyFiles", group: "deployement") {
    from appDir.canonicalPath
    into destination
}

task startApp(type: Exec, dependsOn: "sync", group: "deployement") {
    workingDir destination
    commandLine './start.sh'
    environment("BUILD_ID", "dontKillMe")
}
